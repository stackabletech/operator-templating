---
- name: "Operator [{{ operator.name }}] clone into working directory"
  tags: local
  ansible.builtin.git:
    repo: "https://{{ gh_access_token }}@github.com/{{ operator.url }}"
    dest: "{{ work_dir }}/{{ operator.name }}"
    update: false
    version: "{{ operator.branch | default('main') }}"

- name: Create new branch
  command:
    argv: [git, checkout, -b, "{{ pr_branch_name }}"]
    chdir: "{{ work_dir }}/{{ operator.name }}"

# Check if anything was changed, if yes commit changes and create a pull request, otherwise skip rest of this play
- name: Perform local file operations
  tags: local
  block:
    - name: "Operator [{{ operator.name }}] current operator"
      debug:
        var: operator.name

    - name: "Operator [{{ operator.name }}] find template files"
      find:
        paths: "{{ template_dir }}/"
        patterns: "*.j2"
        file_type: file
        hidden: true
        use_regex: false
        recurse: true
      register: files_j2

    - name: "Operator [{{ operator.name }}] find regular files that need no templating"
      find:
        paths: "{{ template_dir }}/"
        excludes: "*.j2"
        file_type: file
        hidden: true
        use_regex: false
        recurse: true
      register: files_normal

    - name: "Operator [{{ operator.name }}] find GitHub Workflow files"
      find:
        paths: "{{ template_dir }}/.github/workflows/"
        file_type: file
        hidden: true
        use_regex: false
        recurse: false
      register: workflow_files

    - name: "Operator [{{ operator.name }}] ensure directories exist"
      file:
        path: "{{ item.path | replace(template_dir, work_dir + '/' + operator.name) |  replace('[[operator]]', operator.name) | dirname }}"
        state: directory
      with_items:
        - "{{ files_j2.files }}"
        - "{{ files_normal.files }}"
      register: directory_result

    # Since a few of our files contain github actions env vars which are delimited by ${{  }} we need to change
    # the variable_start/end_strings here to avoid collisions
    - name: "Operator [{{ operator.name }}] copy templates files"
      template:
        src: "{{ item.path }}"
        mode: "preserve"
        dest: "{{ item.path | replace(template_dir, work_dir + '/' + operator.name) | replace('[[operator]]', operator.name) | regex_replace('.j2$', '') }}"
        variable_start_string: "{["
        variable_end_string: "}]"
        block_start_string: "{[%"
        block_end_string: "%}]"
      with_items: "{{ files_j2.files }}"
      register: template_result
      when: item.path | replace(template_dir + '/', '') not in operator.ignored_files | default([])

    - name: "Operator [{{ operator.name }}] copy normal files to temp directory"
      copy:
        src: "{{ item.path }}"
        mode: "preserve"
        dest: "{{ item.path | replace(template_dir, work_dir + '/' + operator.name) | replace('[[operator]]', operator.name)}}"
      with_items: "{{ files_normal.files }}"
      register: file_result
      when: item.path | replace(template_dir + '/', '') not in operator.ignored_files | default([])

    - name: "Operator [{{ operator.name }}] remove retired files and directories"
      file:
        path: "{{ work_dir }}/{{ operator.name }}/{{ item | replace('[[product]]', operator.product_string) }}"
        state: absent
      with_items: "{{ retired_files | default([]) }}"
      register: deletion_result

    - name: "Operator [{{ operator.name }}] regenerate charts to update version"
      command:
        argv: [make, regenerate-charts]
        chdir: "{{ work_dir }}/{{ operator.name }}"

    - name: "Operator [{{ operator.name }}] regenerate crate2nix"
      command:
        argv: [make, regenerate-nix]
        chdir: "{{ work_dir }}/{{ operator.name }}"

    - name: "Operator [{{ operator.name }}] re-render README"
      command:
        argv: [make, render-readme]
        chdir: "{{ work_dir }}/{{ operator.name }}"

    - name: "Operator [{{ operator.name }}] run 'git diff' to check that there are changes"
      command:
        argv: [git, diff, --exit-code]
        chdir: "{{ work_dir }}/{{ operator.name }}"
      register: git_change
      failed_when: git_change.rc == 0 # fail when there are no changes


# Check if anything was changed, if yes commit changes and create a pull request, otherwise skip rest of this play
- name: "Operator [{{ operator.name }}] create PR if changes were performed"
  block:
    - name: "Operator [{{ operator.name }}] run 'git ls-remotes' to ensure that the branch {{ pr_branch_name  }} doesn't exist"
      command:
        argv: [git, ls-remote, --exit-code, --heads, "https://{{ gh_access_token }}@github.com/{{ operator.url }}", "{{ pr_branch_name }}"]
        chdir: "{{ work_dir }}/{{ operator.name }}"
      register: branch_exists
      failed_when: branch_exists.rc != 2 # fail when branch exists

    - name: "Operator [{{ operator.name }}] stage all changes"
      command:
        argv: [git, add, .]
        chdir: "{{ work_dir }}/{{ operator.name }}"

    - name: "Operator [{{ operator.name }}] commit changes"
      command:
        argv: [git, commit, -a, -m, "{{ commit_message }}"]
        chdir: "{{ work_dir }}/{{ operator.name }}"

    - name: "Operator [{{ operator.name }}] push changes to branch {{ pr_branch_name }}"
      command:
        argv: [git, push, --set-upstream, origin, "{{ pr_branch_name }}"]
        chdir: "{{ work_dir }}/{{ operator.name }}"

    - name: "Operator [{{ operator.name }}] create PR"
      command:
        argv: [gh, pr, create, --base, main, --title, "{{ pr_title }}", --body, "{{ pr_body }}", --reviewer, "{{ author }}"]
        chdir: "{{ work_dir }}/{{ operator.name }}"

- name: "Operator [{{ operator.name }}] clean"
  command:
    argv: [cargo, clean]
    chdir: "{{ work_dir }}/{{ operator.name }}"
  tags: local
