---
- name: Clone operator repository into working directory
  tags: local
  ansible.builtin.git:
    repo: "https://{{ gh_access_token }}@github.com/{{ operator.url }}"
    dest: "{{ work_dir }}/{{ operator.name }}"
    update: false

- name: Create new branch
  command:
    argv: [git, checkout, -b, "{{ pr_branch_name }}"]
    chdir: "{{ work_dir }}/{{ operator.name }}"

# Check if anything was changed, if yes commit changes and create a pull request, otherwise skip rest of this play
- name: Perform local file operations
  block:
    - name: Display current operator
      debug:
        var: operator.name

    - name: Find template files
      find:
        paths: "{{ template_dir }}/"
        patterns: "*.j2"
        file_type: file
        hidden: true
        use_regex: false
        recurse: true
      register: files_j2

    - name: Find regular files that need no templating
      find:
        paths: "{{ template_dir }}/"
        excludes: "*.j2"
        file_type: file
        hidden: true
        use_regex: false
        recurse: true
      register: files_normal

    - name: Find GitHub Workflow files
      find:
        paths: "{{ template_dir }}/.github/workflows/"
        file_type: file
        hidden: true
        use_regex: false
        recurse: false
      register: workflow_files

    - name: Ensure directories exist
      file:
        path: "{{ item.path | replace(template_dir, work_dir + '/' + operator.name) |  replace('[[operator]]', operator.name) | dirname }}"
        state: directory
      with_items:
        - "{{ files_j2.files }}"
        - "{{ files_normal.files }}"
      register: directory_result

    # Since a few of our files contain github actions env vars which are delimited by ${{  }} we need to change
    # the variable_start/end_strings here to avoid collisions
    - name: Copy templates files
      template:
        src: "{{ item.path }}"
        mode: "preserve"
        dest: "{{ item.path | replace(template_dir, work_dir + '/' + operator.name) | replace('[[operator]]', operator.name) | regex_replace('.j2$', '') }}"
        variable_start_string: "{["
        variable_end_string: "}]"
        block_start_string: "{[%"
        block_end_string: "%}]"
      with_items: "{{ files_j2.files }}"
      register: template_result

    - name: Copy normal files to temp directory
      copy:
        src: "{{ item.path }}"
        mode: "preserve"
        dest: "{{ item.path | replace(template_dir, work_dir + '/' + operator.name) | replace('[[operator]]', operator.name)}}"
      with_items: "{{ files_normal.files }}"
      register: file_result

    - name: Remove retired files and directories
      file:
        path: "{{ work_dir }}/{{ operator.name }}/{{ item | replace('[[product]]', operator.product_string) }}"
        state: absent
      with_items: "{{ retired_files }}"
      register: deletion_result
      when: retired_files is defined

    - name: Regenerate charts to update version
      command:
        argv: [make, compile-chart, generate-manifests]
        chdir: "{{ work_dir }}/{{ operator.name }}"

    - name: Run 'git diff' to check for changes that would require creating a pr
      command:
        argv: [git, diff, --exit-code]
        chdir: "{{ work_dir }}/{{ operator.name }}"
      ignore_errors: true
      register: git_change

    - name: Run 'git ls-remotes' to check if a branch for this source commit already exists
      command:
        argv: [git, ls-remote, --exit-code, --heads, https://{{ gh_access_token }}@github.com/{{ operator.url }}, {{ pr_branch_name }}]
        chdir: "{{ work_dir }}/{{ operator.name }}"
      ignore_errors: true
      register: branch_exists
  tags: local

# Check if anything was changed, if yes commit changes and create a pull request, otherwise skip rest of this play
- name: Create PR if changes were performed
  block:
    - name: Stage all changes
      command:
        argv: [git, add, .]
        chdir: "{{ work_dir }}/{{ operator.name }}"

    - name: Commit changes
      command:
        argv: [git, commit, -a, -m, "{{ commit_message }}"]
        chdir: "{{ work_dir }}/{{ operator.name }}"

    - name: Push changes
      command:
        argv: [git, push, --set-upstream, origin, "{{ pr_branch_name }}"]
        chdir: "{{ work_dir }}/{{ operator.name }}"

    - name: Create PR
      command:
        argv: [gh, pr, create, --base, main, --title, "{{ pr_title }}", --body, "{{ pr_body }}", --reviewer, "@stackabletech/developers"]
        chdir: "{{ work_dir }}/{{ operator.name }}"

  when: git_change.rc != 0 and branch_exists.rc == 2 # rc of 2 means the branch doesn't exist which is what we want
